<?xml version="1.0" encoding="UTF-8"?>
<!-- dev -->
<configuration scan="true" scanPeriod="2 seconds" debug="false" info="false">
    <property name="LOG_HOME" value="${CATALINA_HOME:-.}/logs"/>
    <!-- 输出位置 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <withJansi>false</withJansi>
        <encoder>
            <!--<pattern>%d{yyyy-M-d HH:mm:ss} %t %p %m%n</pattern>-->
            <!--%m输出代码中指定的消息-->
            <!--%p输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL-->
            <!--%r输出自应用启动到输出该log信息耗费的毫秒数-->
            <!--%c输出所属的类目，通常就是所在类的全名-->
            <!--%t输出产生该日志事件的线程名-->
            <!--%n输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n”-->
            <!--%d输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921-->
            <!--%l输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)-->
            <!-- 颜色：magenta，gray，white，cyan，boldRed，boldYellow，boldBlue，boldMagenta，blue，black -->
            <!-- %magenta(%d{yyyy-M-d HH:mm:ss}) %green([%t]) %highlight(%p) %yellow(%m) %white([%c.%M,%L]) %n -->
            <pattern>%magenta(%d{yyyy-M-d HH:mm:ss}) %highlight(%p) %yellow(%m) %white([%c.%M,%L]) %n</pattern>
        </encoder>
    </appender>
    <appender name="smile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- rollover daily -->
            <fileNamePattern>${LOG_HOME}/logback.%d{yyyy-MM-dd}.%i.smile</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- or whenever the file size reaches 100MB -->
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- each file should be at most 100MB, keep 60 days worth of history, but at most 20GB -->
            <!--<maxFileSize>100MB</maxFileSize>-->
            <maxHistory>60</maxHistory>
            <totalSizeCap>20GB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>%magenta(%d{yyyy-M-d HH:mm:ss}) %green([%t]) %highlight(%p) %yellow(%m) %white([%c.%M,%L]) %n</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>DENY</onMatch>
            <onMismatch>ACCEPT</onMismatch>
        </filter>
    </appender>
    <appender name="warn" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/logback.%d{yyyy-MM-dd}.%i.warn</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>60</maxHistory>
            <totalSizeCap>20GB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>%magenta(%d{yyyy-M-d HH:mm:ss}) %green([%t]) %highlight(%p) %yellow(%m) %white([%c.%M,%L]) %n</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>
    <appender name="error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/logback.%d{yyyy-MM-dd}.%i.error</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>60</maxHistory>
            <totalSizeCap>20GB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>%magenta(%d{yyyy-M-d HH:mm:ss}) %green([%t]) %highlight(%p) %yellow(%m) %white([%c.%M,%L]) %n</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>
    <!-- name包必须能够扫描到所以类，包括启动类 -->
    <logger name="com.vitily" level="debug" />
    <logger name="com.blockchain" level="debug" />
    <logger name="org.springframework.jdbc" level="debug" />
    <logger name="org.apache.coyote" level="warn" />
    <logger name="org.springframework.boot" level="info" />
    <logger name="org.springframework" level="warn" />
    <logger name="com.netflix.discovery" level="warn" />

    <logger name="org.mybatis.spring.transaction" level="debug" />
    <logger name="com.codingapi" level="debug" />
    <!--<logger name="org.springframework.jdbc.datasource" level="warn" />-->

    <logger name="*" level="debug" />
    <!-- 不同环境输出不一样 -->
    <springProfile name="default,dev,subversion">
        <root level="info">
            <appender-ref ref="console" />
        </root>
    </springProfile>
    <springProfile name="test">
        <root level="info">
            <appender-ref ref="console" />
            <appender-ref ref="smile" />
            <appender-ref ref="warn" />
            <appender-ref ref="error" />
        </root>
    </springProfile>
    <springProfile name="prod">
        <root level="info">
            <appender-ref ref="console" />
            <appender-ref ref="smile" />
            <appender-ref ref="warn" />
            <appender-ref ref="error" />
        </root>
    </springProfile>

</configuration>